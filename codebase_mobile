import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  SafeAreaView,
} from 'react-native';

const NumberSystemConverter = () => {
  const [currentValue, setCurrentValue] = useState('0');
  const [currentBase, setCurrentBase] = useState(2);
  const [selectedBase, setSelectedBase] = useState('BIN');
  const [previousValue, setPreviousValue] = useState('0');
  const [operation, setOperation] = useState('');

  const convertBase = (num, fromBase, toBase) => {
    // First, ensure the number is a string
    const numStr = num.toString();

    // Convert from the original base to decimal
    const decimal = parseInt(numStr, fromBase);

    // If the conversion to decimal failed, return '0'
    if (isNaN(decimal)) {
      return '0';
    }

    // Convert from decimal to the target base
    return decimal.toString(toBase).toUpperCase();
  };

  const updateDisplay = (value) => {
    setCurrentValue(value);
  };

  const handleNumberPress = (num) => {
    if (currentValue === '0') {
      updateDisplay(num);
    } else {
      updateDisplay(currentValue + num);
    }
  };

  const handleOperationPress = (op) => {
    // Store the current value and operation
    setPreviousValue(currentValue);
    setCurrentValue('0'); // Reset current value for the next number input
    setOperation(op);
  };

  const handleEqualsPress = () => {
    // Convert previous and current values to decimal for calculation
    const prevDecimal = parseInt(previousValue, currentBase);
    const currDecimal = parseInt(currentValue, currentBase);

    let resultDecimal;

    // Perform the operation based on the selected operation
    switch (operation) {
      case '+':
        resultDecimal = prevDecimal + currDecimal;
        break;
      case '-':
        resultDecimal = prevDecimal - currDecimal;
        break;
      case '×':
        resultDecimal = prevDecimal * currDecimal;
        break;
      case '÷':
        resultDecimal = currDecimal !== 0 ? prevDecimal / currDecimal : 'Error'; // Handle division by zero
        break;
      default:
        return; // No operation to perform
    }

    // Convert result back to the selected base and update current value
    setCurrentValue(convertBase(resultDecimal.toString(), 10, currentBase));
    setOperation(''); // Clear the operation
  };

  const handleBaseChange = (base, baseStr) => {
    const newValue = convertBase(currentValue, currentBase, base);
    setCurrentBase(base);
    setCurrentValue(newValue);
    setSelectedBase(baseStr);
  };

  const handleClear = () => {
    setCurrentValue('0');
    setPreviousValue('0');
    setOperation('');
  };

  const isButtonDisabled = (button) => {
    if (['AC', '+', '-', '×', '÷', '%', '=', '0', '00'].includes(button))
      return false;
    if (selectedBase === 'BIN' && !'01'.includes(button)) return true;
    if (selectedBase === 'OCT' && !'01234567'.includes(button)) return true;
    if (selectedBase === 'DEC' && !'0123456789'.includes(button)) return true;
    return false;
  };

  const renderBaseDisplay = (label, value, baseNum, baseStr) => (
    <TouchableOpacity
      style={[
        styles.baseDisplay,
        selectedBase === baseStr && styles.selectedBaseDisplay,
      ]}
      onPress={() => handleBaseChange(baseNum, baseStr)}>
      <Text style={styles.baseLabel}>{label}</Text>
      <Text style={styles.baseValue}>{value}</Text>
    </TouchableOpacity>
  );

  const renderButton = (label, onPress, color = styles.darkButton) => {
    const isDisabled = isButtonDisabled(label);
    return (
      <TouchableOpacity
        style={[styles.button, color, isDisabled && styles.disabledButton]}
        onPress={isDisabled ? null : onPress}
        disabled={isDisabled}>
        <Text
          style={[
            styles.buttonText,
            color === styles.orangeButton && styles.orangeButtonText,
          ]}>
          {label}
        </Text>
      </TouchableOpacity>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.displayContainer}>
        {renderBaseDisplay(
          'HEX',
          convertBase(currentValue, currentBase, 16),
          16,
          'HEX'
        )}
        {renderBaseDisplay(
          'DEC',
          convertBase(currentValue, currentBase, 10),
          10,
          'DEC'
        )}
        {renderBaseDisplay(
          'OCT',
          convertBase(currentValue, currentBase, 8),
          8,
          'OCT'
        )}
        {renderBaseDisplay(
          'BIN',
          convertBase(currentValue, currentBase, 2),
          2,
          'BIN'
        )}
      </View>
      <View style={styles.buttonContainer}>
        <View style={styles.row}>
          {renderButton('D', () => handleNumberPress('D'))}
          {renderButton('E', () => handleNumberPress('E'))}
          {renderButton('F', () => handleNumberPress('F'))}
          {renderButton('AC', handleClear, styles.orangeButton)}
        </View>
        <View style={styles.row}>
          {renderButton('A', () => handleNumberPress('A'))}
          {renderButton('B', () => handleNumberPress('B'))}
          {renderButton('C', () => handleNumberPress('C'))}
          {renderButton(
            '÷',
            () => handleOperationPress('÷'),
            styles.orangeButton
          )}
        </View>
        <View style={styles.row}>
          {renderButton('7', () => handleNumberPress('7'))}
          {renderButton('8', () => handleNumberPress('8'))}
          {renderButton('9', () => handleNumberPress('9'))}
          {renderButton(
            '×',
            () => handleOperationPress('×'),
            styles.orangeButton
          )}
        </View>
        <View style={styles.row}>
          {renderButton('4', () => handleNumberPress('4'))}
          {renderButton('5', () => handleNumberPress('5'))}
          {renderButton('6', () => handleNumberPress('6'))}
          {renderButton(
            '-',
            () => handleOperationPress('-'),
            styles.orangeButton
          )}
        </View>
        <View style={styles.row}>
          {renderButton('1', () => handleNumberPress('1'))}
          {renderButton('2', () => handleNumberPress('2'))}
          {renderButton('3', () => handleNumberPress('3'))}
          {renderButton(
            '+',
            () => handleOperationPress('+'),
            styles.orangeButton
          )}
        </View>
        <View style={styles.row}>
          {renderButton('0', () => handleNumberPress('0'))}
          {renderButton('00', () => handleNumberPress('00'))}
          {renderButton('%', () => handleOperationPress('%'))}
          {renderButton('=', handleEqualsPress, styles.orangeButton)}
        </View>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'black',
    padding: 16,
  },
  displayContainer: {
    flex: 1,
    justifyContent: 'flex-end',
  },
  baseDisplay: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 16,
  },
  selectedBaseDisplay: {
    backgroundColor: '#333',
    borderRadius: 8,
  },
  baseLabel: {
    color: 'white',
    fontSize: 24,
    fontWeight: 'bold',
  },
  baseValue: {
    color: 'white',
    fontSize: 24,
  },
  buttonContainer: {
    marginTop: 20,
  },
  row: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  button: {
    width: 70,
    height: 70,
    borderRadius: 35,
    justifyContent: 'center',
    alignItems: 'center',
  },
  darkButton: {
    backgroundColor: '#333',
  },
  orangeButton: {
    backgroundColor: '#FF9500',
  },
  buttonText: {
    color: 'white',
    fontSize: 24,
    fontWeight: 'bold',
  },
  orangeButtonText: {
    color: 'black',
  },
  disabledButton: {
    opacity: 0.3,
  },
});

export default NumberSystemConverter;
